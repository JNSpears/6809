'''
Created on Apr 20, 2017

@author: james
'''
import unittest
import mpx9dsk

#       Curr,  Back,   Next,   Count, Address,      Type, Data,                                         CRC
data1 = (0,    0xffff, 1,      0,     0x1234,       0,    ''.join([chr(x) for x in range(256)]),         12)
data2 = (1,    0,      0xffff, 0,     0x1234+0x100, 0,    ''.join([chr(x) for x in range(255,-1,-1)]),   12)


sectordata1 = '\x00\x00\xff\xff\x00\x01\x00\x124\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\x00\x0c'
sectordata2 = '\x00\x01\x00\x00\xff\xff\x00\x134\x00\xff\xfe\xfd\xfc\xfb\xfa\xf9\xf8\xf7\xf6\xf5\xf4\xf3\xf2\xf1\xf0\xef\xee\xed\xec\xeb\xea\xe9\xe8\xe7\xe6\xe5\xe4\xe3\xe2\xe1\xe0\xdf\xde\xdd\xdc\xdb\xda\xd9\xd8\xd7\xd6\xd5\xd4\xd3\xd2\xd1\xd0\xcf\xce\xcd\xcc\xcb\xca\xc9\xc8\xc7\xc6\xc5\xc4\xc3\xc2\xc1\xc0\xbf\xbe\xbd\xbc\xbb\xba\xb9\xb8\xb7\xb6\xb5\xb4\xb3\xb2\xb1\xb0\xaf\xae\xad\xac\xab\xaa\xa9\xa8\xa7\xa6\xa5\xa4\xa3\xa2\xa1\xa0\x9f\x9e\x9d\x9c\x9b\x9a\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90\x8f\x8e\x8d\x8c\x8b\x8a\x89\x88\x87\x86\x85\x84\x83\x82\x81\x80\x7f~}|{zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=<;:9876543210/.-,+*)(\'&%$#"! \x1f\x1e\x1d\x1c\x1b\x1a\x19\x18\x17\x16\x15\x14\x13\x12\x11\x10\x0f\x0e\r\x0c\x0b\n\t\x08\x07\x06\x05\x04\x03\x02\x01\x00\x00\x0c'

class Test(unittest.TestCase):


    def setUp(self):
        pass


    def tearDown(self):
        pass


    def testSectorCtor(self):
        for data, sectordata in ((data1, sectordata1), (data2, sectordata2)):
            sector = mpx9dsk.Sector(data)
            self.assertEqual(sector.getPackedString(), sectordata)
            self.assertEqual(len(sector.getPackedString()), mpx9dsk.SECTOR_LENGTH)
            self.assertEqual(sector.getTuple(), data)

    def testSectorAccessors(self):
        for data in (data1, data2):
            sector = mpx9dsk.Sector(data)
            self.assertEqual(sector.Curr, data[0])
            self.assertEqual(sector.Back, data[1])
            self.assertEqual(sector.Next, data[2])
            self.assertEqual(sector.Count, data[3])
            self.assertEqual(sector.Address, data[4])
            self.assertEqual(sector.Type, data[5])
            self.assertEqual(sector.Data, data[6])
            self.assertEqual(sector.CRC, data[7])

if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()