GC000FFORTH9 VLIST      WARM                                                                                                                                                                                ( HEX NUMBER PATCH;  $XXXX  )                                                                                                     ( THE USER VAR 'FDL' WILL BE USED TO HOLD THE BASE )            ( DURING CONVERSION                                )          HEX                                                             VARIABLE FDL                                                    BASE @ FDL !                                                                                                                    : X                                                                 +  DUP  1+  C@  24 =     ( FIRST CHAR A '$' ? )                    IF  1+ 10             ( IF SO THEN SET FDL=16 )                   ELSE  BASE @  THEN  ( ELSE FDL=BASE )                      FDL !  ;                                                                                                                    BASE @ FDL !                                                                                                                    ( ' FDL   CFA  0E47 !          ( PATCH (NUMBER-  )              ( ' FDL   CFA  0E5D !          ( PATCH (NUMBER-  )              ' FDL CFA ' (NUMBER) CFA  DUP U. 2BFC 2BF2 - DUP U. + DUP U. !  ' FDL CFA ' (NUMBER) CFA  DUP U. 2C08 2BF2 - DUP U. + DUP U. !  ' FDL CFA ' (NUMBER) CFA  DUP U. 2C12 2BF2 - DUP U. + DUP U. !                                                                  ( ' X     CFA  0E9F !          ( PATCH NUMBER    )              ' X   CFA ' NUMBER   CFA  DUP U. 2C55 2C3D - DUP U. + DUP U. !                                                                    SMUDGE                     ( HIDE PATCH      )                  DECIMAL                                                                                                                       HEX 1234 DECIMAL $1234 = . HEX                                                                                                  ( TOOLS                                                        )                                                                : 1- 1 - ;                                                                                                                      : DEPTH  ( ... N )                                                  S0 @ SP@ - 2 / 1- ;                                                                                                         : .STACK ( PRINT STACK )                                            DEPTH 0 < IF ." Stack underflow" QUIT THEN                      DEPTH 0= IF ." Stack empty" QUIT THEN                           DEPTH 0 DO I 1+ 2 * SP@ + @ U. LOOP  ;                                                                                                                                                      123 1 222 .STACK                                                                                                                                                                                ( 6809 FORTH ASSEMBLER                            JNS 08/28/83 )                                                                VOCABULARY ASSEMBLER IMMEDIATE                                  ASSEMBLER DEFINITIONS                                                                                                           HEX                                                                                                                             ( 57 CONSTANT PUSHD                                           ) ( 77 CONSTANT NEXT                                            ) 0  VARIABLE OPTYPE                                                                                                              : :CASE                                                             <BUILDS ] DOES> SWAP DUP + + @ EXECUTE ;                    ( : CASE; [COMPILE] [ ; )                                       : IMM8 HERE 1- C@ F AND >R R 3 = R C = OR R> E = OR                 IF ( 16 bit imm ) , ELSE ( 8 bit imm ) C, THEN  ;           : IX1 DUP 7 AND IF DUP 1 AND                                        IF ( 16 bit pcr )  C, HERE 2+ - ,                               ELSE ( 8 bit pcr ) C, HERE 1+ - C, THEN                             ELSE ( 8 bit disp ) C, C, THEN ;                        :CASE  OPRANDS  ,  IMM8  IX1  C, [                                                                                              ( 6809 FORTH ASSEMBLER                            JNS 08/28/83 ): OPCODE    ( IMM EXT INX PREFIX OPCODE <NMONIC> )                  <BUILDS  C,  >R  C,  C,  R>  DUP  C,  C,                        DOES>  DUP  C@  -DUP  IF  C,  THEN       ( PREFIX )                    OPTYPE  @  +  1+  C@  C,          ( OPCODE )                    OPTYPE  @  OPRANDS                ( OPRANDS )                   0  OPTYPE  !  ;                                      00 7E 6E  0  OPCODE  JMP,    00 BD AD  0  OPCODE  JSR,          86 B6 A6  0  OPCODE  LDA,    00 B7 A7  0  OPCODE  STA,          C6 F6 E6  0  OPCODE  LDB,    00 F7 E7  0  OPCODE  STB,          CC FC EC  0  OPCODE  LDD,    00 FD ED  0  OPCODE  STD,          8E BE AE  0  OPCODE  LDX,    00 BF AF  0  OPCODE  STX,          8E BE AE 10  OPCODE  LDY,    00 BF AF  0  OPCODE  STY,          CE FE EE 10  OPCODE  LDS,    00 FF EF 10  OPCODE  STS,          CE FE EE  0  OPCODE  LDU,    00 FF EF  0  OPCODE  STU,                                                                          ( 6809 FORTH ASSEMBLER                            JNS 08/28/83 )89 B9 A9  0  OPCODE  ADCA,   82 B2 A2  0  OPCODE  SBCA,         C9 F9 E9  0  OPCODE  ADCB,   C2 F2 E2  0  OPCODE  SBCB,         8B BB AB  0  OPCODE  ADDA,   80 B0 A0  0  OPCODE  SUBA,         CB FB EB  0  OPCODE  ADDB,   C0 F0 E0  0  OPCODE  SUBB,         C3 F3 E3  0  OPCODE  ADDD,   83 B3 A3  0  OPCODE  SUBD,         84 B4 A4  0  OPCODE  ANDA,   C4 F4 E4  0  OPCODE  ANDB,         00 78 68  0  OPCODE  ASL,    00 77 67  0  OPCODE  ASR,          86 B5 A5  0  OPCODE  BITA,   C5 F5 E5  0  OPCODE  BITB,         00 7F 6F  0  OPCODE  CLR,    00 73 63  0  OPCODE  COM,          81 B1 A1  0  OPCODE  CMPA,   C1 F1 E1  0  OPCODE  CMPB,         83 B3 A3 10  OPCODE  CMPD,   8C BC AC  0  OPCODE  CMPX,         00 7A 6A  0  OPCODE  DEC,    00 7C 6C  0  OPCODE  INC,          88 B8 A8  0  OPCODE  EORA,   C8 F8 E8  0  OPCODE  EORB,         00 78 68  0  OPCODE  LSL,    00 74 64  0  OPCODE  LSR,          00 00 30  0  OPCODE  LEAX,   00 00 31  0  OPCODE  LEAY,                                                                         ( 6809 FORTH ASSEMBLER                            JNS 08/28/83 )00 00 32  0  OPCODE  LEAS,    00 00 33  0  OPCODE  LEAU,        00 70 60  0  OPCODE  NEG,     8A BA AA  0  OPCODE  ORA,         CA FA EA  0  OPCODE  ORB,     00 79 69  0  OPCODE  ROL,         00 76 66  0  OPCODE  ROR,     00 7D 6D  0  OPCODE  TST,         : INH <BUILDS C, DOES> C@ C, ;                                  3A INH ABX,    48 INH ASLA,    58 INH ASLB,    47 INH ASRA,     57 INH ASRB,   4F INH CLRA,    5F INH CLRB,    43 INH COMA,     53 INH COMB,   19 INH DAA,     4A INH DECA,    5A INH DECB,     4C INH INCA,   5C INH INCB,    48 INH LSLA,    58 INH LSLB,     44 INH LSRA,   54 INH LSRB,    3D INH MUL,     40 INH NEGA,     50 INH NEGB,   12 INH NOP,     49 INH ROLA,    59 INH ROLB,     46 INH RORA,   56 INH RORB,    39 INH RTS,     1D INH SEX,      3F INH SWI,    4D INH TSTA,    5D INH TSTB,    3B INH RTI,                                                                      : MPX, 113F , C, ;                                                                                                              : ## 1 OPTYPE ! ;                                                                                                               ( 6809 FORTH ASSEMBLER                            JNS 08/28/83 )                                                                : INX    ( <POSTBYTE> <MODE> INX <NAME> )                           <BUILDS C, C,                                                   DOES> DUP C@ OPTYPE ! 1+ C@ ;                               : [] ( indirect index ) 10 OR ;   ( <indexmode> [] <opcode> )   88 2 INX ,X     A8 2 INX ,Y     C8 2 INX ,U     E8 2 INX ,S     84 3 INX 0,X    A4 3 INX 0,Y    C4 3 INX 0,U    E4 3 INX 0,S    83 3 INX ,--X   A3 3 INX ,--Y   C3 3 INX ,--U   E3 3 INX ,--S   81 3 INX ,X++   A1 3 INX ,Y++   C1 3 INX ,U++   E1 3 INX ,S++   82 3 INX ,-X    A2 3 INX ,-Y    C2 3 INX ,-U    E1 3 INX ,-S    80 3 INX ,X+    A0 3 INX ,Y+    C0 3 INX ,U+    E0 3 INX ,S+    86 3 INX A,X    A6 3 INX A,Y    C6 3 INX A,U    E6 3 INX A,S    85 3 INX B,X    A5 3 INX B,Y    C5 3 INX B,U    E5 3 INX B,S    8B 3 INX D,X    AB 3 INX D,Y    CB 3 INX D,U    EB 3 INX D,S                                                                                                                                                                                                    ( 6809 FORTH ASSEMBLER                            JNS 08/28/83 )                                                                : IF,      C,  HERE  0  C,  ;                                   : THEN,    HERE  OVER  -  1-  SWAP  C!  ;                       : ELSE,    20  IF,  SWAP  THEN,  ;                                                                                              : CBACK       HERE  -  1-  C,  ;                                : BEGIN,     HERE  ;                                            : UNTIL,     C,  CBACK  ;                                       : WHILE,     IF,  ;                                             : REPEAT,    SWAP  20  UNTIL,  THEN,  ;                                                                                         26 CONSTANT EQ  2A CONSTANT MI  2F CONSTANT GT  2D CONSTANT GE  23 CONSTANT HI  25 CONSTANT HS  27 CONSTANT NE  2B CONSTANT PL  2E CONSTANT LE  2C CONSTANT LT  22 CONSTANT LS  24 CONSTANT LO                                                                  ( 6809 FORTH ASSEMBLER                            JNS 08/28/83 )                                                                0 VARIABLE PPB    0 VARIABLE TEB                                                                                                : REGID    ( PP-BITS TE-BITS  REGID  .A )                           <BUILDS  C,  C,                                                 DOES>   @  100 /MOD  SWAP                                               PPB @ OR PPB !    TEB @ 10 * OR TEB !  ;                                                                            01 A REGID .CCR  02 8 REGID .A   04 9 REGID .B   08 B REGID .DP 10 1 REGID .X    20 2 REGID .Y   40 4 REGID .S   40 3 REGID .U  80 5 REGID .PC   06 0 REGID .D                   10 1 REGID .W                                                                  : RBUILD                                                            SWAP  C,  @  C,  0 PPB !  0 TEB !  ;                                                                                        ( 6809 FORTH ASSEMBLER                            JNS 08/28/83 )                                                                : TFR,   1F  TEB  RBUILD  ;                                     : EXG,   1E  TEB  RBUILD  ;                                                                                                     : PSHS,  34  PPB  RBUILD  ;                                     : PULS,  35  PPB  RBUILD  ;                                     : PSHU,  36  PPB  RBUILD  ;                                     : PULU,  37  PPB  RBUILD  ;                                                                                                     : NEXT, ,Y++ LDX, ,X++ [] JMP, ;                                ( 813F AEA1             LDX   ,Y++                             )( 8141 6E91             JMP   [,X++]                           )                                                                : CODE  CREATE SMUDGE ;                                                                                                         8C 2 INX <,PCR    8D 2 INX ,PCR                                                                                                 ( 6809 FORTH ASSEMBLER                            JNS 08/28/83 )                                                                ( : EQUATE  ( create temporary constant in the overlay area    )(    [compile] assembler  ov-switch                            )(    constant                                                  )(    latest relink  ov-switch  ;                               )                                                                ( : LABLE  ( create temporary lable in overlay area )           (     here equate ; )                                                                                                           : SAVEIP, .Y PSHS, ;                                            : RESTOREIP, .Y PULS, ;                                                                                                         FORTH  DEFINITIONS  DECIMAL                                                                                                     ( : ASSEMBLER   [COMPILE] ASSEMBLER  ;  IMMEDIATE              )                                                                : CODE        [COMPILE] ASSEMBLER ASSEMBLER CODE ;                                                                              CR ." END OF ASSEMBLER"  CR                                                                                                     ( MPX/9 INTERFACE   JNS 8/17/83 )                                                                                               HEX                                                             : :BUFFER                  ( CREATE A BUFFER; n :BUFFER <NAME> )    <BUILDS HERE OVER ERASE ALLOT                                   DOES> ;                                                                                                                     : :FCB                ( CREATE FILE CONTROL BLOCK; :FCB <NAME> )    20 :BUFFER ;                                                                                                                CODE (INIT)         ( FCB@ FILENAME@ ... ERR# )                     SAVEIP,                                                         ,U++ LDX,  ( 1 ,X LEAX, )  0,U LDY,  012 MPX,  CLRA,            0,U STD,                                                        RESTOREIP,  NEXT,                                                                                                           : INIT        ( FCB INIT <FILENAME> )                               BL WORD HERE 1+ (INIT) ;                                                                                                    CODE (RPTER)                                                        ,U++ LDD,  0D MPX,  NEXT,                                                                                                   : RPTER       ( PRINT MPX/9 ERROR MESSAGE; N ... )                  -DUP  IF  (RPTER)  ." ERROR .............." CR QUIT  THEN ;                                                                 ( MPX/9 FILE INTERFACE  OPEN,CLOSE,DELETE )       HEX                                                                           CODE OPEN    ( 1=R,2=W,3=RW BUFFER@ FCB@ ... ERR# )                 SAVEIP,                                                         ,U++ LDY,  ,U++ LDX,  1 ,U LDA,  13 MPX,                        CLRA,  0,U STD,                                                 RESTOREIP,  NEXT,                                                                                                           CODE CLOSE   ( FCB ... ERROR# )                                     SAVEIP,                                                         0,U LDY,  014 MPX,  CLRA,  0,U STD,                             RESTOREIP, NEXT,                                                                                                            CODE DELETE  ( FCB ... ERROR# )                                     SAVEIP,                                                         0,U LDY,  020 MPX,  CLRA,  0,U STD,                             RESTOREIP, NEXT,                                                                                                            :FCB MYFILE                                                                                                                     : SETSCREEN         ( SETSCREEN <FILENAME> )                        MYFILE  INIT  RPTER  3  8000  MYFILE  OPEN  RPTER  ;                                                                        CODE MPX       ( RETURN TO MPX/9 )                                      8 MPX, NEXT,                                                                                                            CODE (MPX)     ( COMMAND@ n ... ERR# )                              SAVEIP,                                                         ,U++ LDX,  0,U LDX,  0C MPX,                                    CLRA,  0,U STD,                                                 RESTOREIP,  NEXT,                                                                                                           ( MPX/9 COMMAND INTERFACE )                                                                                                     : (")                 ( TYPE IN-LINE STRING, ADJUSTING RETURN *)        R COUNT DUP 1+ R> + >R ;                                                                                                : "                                                                     22 STATE @ IF                                                           COMPILE (") WORD HERE C@ 1+ ALLOT                       ELSE                                                                    WORD HERE COUNT ENDIF ; IMMEDIATE               HEX                                                                                                                             CODE (+CR)     ( ADD A CR TO A STRING; STR@ ... STR@ )             0,U LDX,  0,X INC,  0,X LDB,  ABX,  0D ## LDA,  0,X STA,        NEXT,                                                                                                                        : MPX"                                                              HERE  2+  [COMPILE] "  (+CR)  STATE  @                          IF                                                                1 ALLOT COMPILE (MPX)                                         ELSE                                                              (MPX)  THEN                                                   DROP ;  IMMEDIATE                                                                                                           : SAVE-FORTH                                                        MPX" S FORTH.CM 0 3FFF 3 "  ;                                                                                               : FILES                                                             MPX" F 1 "  ;                                                                                                               ' FILES NFA 20 DUMP CR                                                                                                          : trace-on 1 0FFF9 C! ;                                                                                                         FILES                                                                                                                           CODE NO-OP NEXT,                                                                                                                : TEST 10 0 DO CR I . ." -- " I 0 DO I . NO-OP LOOP LOOP ;                                                                      TEST                                                                                                                            ( MYFILE 20 DUMP                                                  )( MYFILE INIT FOO.TX RPTER                                        )( MYFILE 20 DUMP                                                  )(                                                                 )( ' OPEN  .                                                       )( MYFILE .                                                        )( HEX                                                             )( HERE .                                                          )(                                                                 )100 :BUFFER MYBUFF                                              ( HERE .                                                          )( MYBUFF  .                                                       )(                                                                 )( 3  MYBUFF  MYFILE  OPEN  RPTER                                  )(                                                                 )( MYFILE  CLOSE  RPTER                                            )                                                                ( MPX/9 FILE INTERFACE  R-SEC, W-SEC, R/W )                                                                                     DECIMAL                                                                                                                         CODE R-SEC  ( READ SECTOR; FCB@ ... ERR# )                          SAVEIP,  .Y PULU,  23 MPX,  CLRA,  RESTOREIP,                   .D PSHU,  NEXT,                                                                                                             CODE W-SEC  ( WRITE SECTOR; FCB@ ... ERR# )                         SAVEIP,  .Y PULU,  24 MPX,  CLRA,  RESTOREIP,                   .D PSHU,  NEXT,                                                                                                             HEX                                                                                                                             : BAR                                                                   " FOO"  2DUP . .                                                DROP 10 DUMP                                                    ;                                                                                                                       BAR                                                                                                                             DECIMAL                                                         : R/W       ( BUF@ BLK# R/W ... )                                   >R                                                              MYFILE 12 + !  ( BLK# )                                         MYFILE 2+ ! ( Buf@ )                                            MYFILE R>                                                       IF    R-SEC                                                     ELSE  W-SEC                                                     THEN  RPTER  ;                                                HEX                                                                                                                           ( SCR # 58 )                                                    ( DISC UTILITY, GENERAL USE                     WFR-79APR02    )FIRST VARIABLE USE ( NEXT BUFFER TO USE, STALEST *)             FIRST VARIABLE PREV ( MOST RECENTLY REFERENCED BUFFER *)        USE @ U.                                                          FIRST USE !                                                     FIRST PREV !                                                    0 OFFSET !                                                                                                                    : +BUF ( ADVANCE ADDRESS-I TO NEXT BUFFER. RETURNS FALSE *)             B/BUF 4 +  + DUP LIMIT = ( IF AT PREV *)                        IF DROP FIRST ENDIF DUP PREV @ - ;                      : UPDATE ( MARK THE BUFFER POINTED TO BY PREV AS ALTERED *)             PREV @ @ 8000 OR PREV @ ! ;                                                                                             : EMPTY-BUFFERS ( CLEAR BLOCK BUFFERS; DON'T WRITE TO DISC *)           FIRST LIMIT OVER - ERASE ;                                                                                              ( SCR # 59 )                                                    ( BUFFER                                        WFR-79APR02)    : BUFFER ( CONVERT BLOCK/I TO STORAGE ADDRESS *)                        USE @ DUP >R ( BUFFER ADDRESS TO BE ASSIGNED )                  BEGIN +BUF UNTIL ( AVOID PREV ) USE ! ( FOR NEXT TIME )         R @ 0< ( TEST FOR UPDATE IN THIS BUFFER )                       IF ( UPDATED, FLUSH TO DISK )                                           R 2+ ( STORAGE LOC. )                                           R @ 7FFF AND ( IT'S BLOCK # )                                   0 R/W ( WRITE SECTOR TO DISK )                          ENDIF                                                           R ! ( WRITE NEW BLOCK @ INTO THIS BUFFER )                      R PREV ! ( ASSIGN THIS BUFFER AS 'PREV' )                       R> 2+ ( MOVE TO STORAGE LOCATION ) ;                                                                                                                                                    ( SCR # 60 )                                                    ( BLOCK                                        WFR-79APR02 )    : BLOCK ( CONVERT BLOCK NUMBER TO ITS BUFFER ADDRESS )              OFFSET @ + >R ( RETAIN BLOCK # ON RETURN STACK )                PREV @ DUP @ R - DUP + ( BLOCK = PREV ? )                       IF ( NOT PREV )                                                     BEGIN +BUF 0= ( TRUE UPON REACHING 'PREV' )                         IF ( WRAPPED )                                                      DROP R BUFFER                                                   DUP R 1 R/W ( READ SECTOR FROM DISK )                           2 - ( BACKUP )                                              ENDIF                                                           DUP @ R - DUP + 0=                                          UNTIL ( WITH BUFFER ADDRESS )                                   DUP PREV !                                                  ENDIF                                                           R> DROP 2+ ;                                                                                                                ( SCR # 61 )                                                    ( TEXT OUTPUT FORMATTING                        WFR-79MAY03 )   : (LINE) ( LINE#, SCR#, ... BUFFER ADDRESS, 64 COUNT *)                 >R C/L B/BUF */MOD R> B/SCR * +                                 BLOCK + C/L ;                                                                                                           : .LINE ( LINE#, SCR#, ... PRINTED *)                             (LINE) -TRAILING TYPE ;                                                                                                       : MESSAGEX ( PRINT LINE RELATIVE TO SCREEN #4 OF DRIVE 0 *)      WARNING @                                                       IF ( DISC IS AVAILABLE )                                               -DUP IF 4 OFFSET @ B/SCR / - .LINE ENDIF                        ELSE ." MSG @ " . ENDIF ;                                                                                               ( SCR # 62 )                                                    ( LOAD, -->                                        WFR-79APR02 )                                                                : LOAD ( INTERPRET SCREENS FROM DISC *)                                 BLK @ >R IN @ >R 0 IN ! B/SCR * BLK !                           INTERPRET R> IN ! R> BLK ! ;                                                                                            : --> ( CONTINUE INTERPRETATION ON NEXT SCREEN *)                       ?LOADING 0 IN ! B/SCR BLK @ OVER                                MOD - BLK +! ; IMMEDIATE                                                                                                                                                                : MOUNT     ( MOUNT THE DISK IN DRIVE #1 )                          MYFILE  " SCRNFILE.SC,40" DROP (INIT) RPTER                     3 MYBUFF  MYFILE  OPEN  RPTER  ;                                                                                            ( SCR # 77 )                                                    ( PROGRAM DOCUMENTATION                         WFR-79APR20 )   HEX                                                                                                                             : LIST ( LIST SCREEN BY NUMBER ON STACK *)                              DECIMAL CR DUP SCR !                                            ." SCR # " . 10 0 DO CR I 3 .R SPACE                            I SCR @ .LINE LOOP CR ;                                                                                                 : INDEX  ( PRINT FIRST LINE OF EACH SCREEN FROM-2, T0-1 *)              0C EMIT ( FORM FEED ) CR 1+ SWAP                                DO CR I 3 .R SPACE                                                      0 I .LINE                                                       ?TERMINAL IF LEAVE ENDIF LOOP ;                                                                                 : TRIAD ( PRINT 3 SCREENS ON PAGE, CONTAINING # ON STACK )              0C EMIT ( FF ) 3 / 3 * 3 OVER + SWAP                            DO CR I LIST LOOP CR                                            0F MESSAGE CR ; DECIMAL                                                                                                                                                                                                                                 ( SCR # 87 )                                                    (  TEXT, LINE                               WFR-79MAYO1 )       FORTH DEFINITIONS HEX                                           : TEXT                  ( ACCEPT FOLLOWING TEXT TO PAD *)            HERE C/L 1+ BLANKS WORD HERE PAD C/L 1+ CMOVE ;                                                                            : LINE        ( RELATIVE TO SCR, LEAVE ADDRESS OF LINE *)             DUP FFF0 AND 17 ?ERROR  ( KEEP ON THIS SCREEN )                 SCR @       (LINE)       DROP ;                                                                                           ( SCR # 88 )                                                    ( LINE EDITOR                               WFR-79MAYO3 )       VOCABULARY EDITOR IMMEDIATE HEX                                 : WHERE            ( PRINT SCREEN # AND IMAGE OF ERROR *)           DUP B/SCR / DUP SCR 1 ." SCR # " DECIMAL .                      SWAP C/L /MOD C/L * ROT BLOCK + CR C/L TYPE                     CR HERE C@ - SPACES 5E EMIT [COMPILE] EDITOR QUIT ;                                                                         EDITOR DEFINITIONS                                              : #LOCATE              ( LEAVE CURSOR OFFSET-2, LINE-1 *)                R# @ C/L /MOD ;                                        : #LEAD          ( LINE ADDRESS-2, OFFSET-1 TO CURSOR *)                #LOCATE LINE SWAP ;                                     : #LAG       ( CURSOR ADDRESS-2, COUNT-1 AFTER CURSOR *)                #LEAD DUP >R + C/L R> - ;                               : -MOVE ( MOVE IN BLOCK BUFFER ADDR FROM-2, LINE TO-1 *)                LINE C/L CMOVE UPDATE ;                                                                                                 ( SCR # 89 )                                                    ( LINE EDITING COMMANDS                     WFR-79MAY03 )       : H                        ( HOLD NUMBERED LINE AT PAD *)            LINE PAD 1+ C/L DUP PAD C! CMOVE ;                                                                                         : E                         ( ERASE LINE-1 WITH BLANKS *)            LINE C/L BLANKS UPDATE ;                                                                                                   : S                       ( SPREAD MAKING LINE # BLANK *)            DUP 1 - ( LIMIT ) 0E ( FIRST TO MOVE )                          DO I LINE I 1+ -MOVE -1 +LOOP E ;                                                                                          : D                  ( DELETE LINE-1, BUT HOLD IN PAD *)            DUP H 0F DUP ROT                                                DO I 1+ LINE I -MOVE LOOP E ;                                                                                                                                                               ( SCR # 90 )                                                    ( LINE EDITING COMMANDS                          WFR-79MAY03 )                                                                  : M ( MOVE CURSOR BY SIGNED AMOUNT-1, PRINT ITS LINE *)              R# +! CR SPACE #LEAD TYPE 5F EMIT                                              #LAG TYPE #LOCATE . DROP ;                                                                                  : T   ( TYPE LINE BY #-1, SAVE ALSO IN PAD *)                        DUP C/L * R# ! DUP H 0 M ;                                 : L   ( RE-LIST SCREEN *)                                            SCR @ LIST 0 M ;                                                                                                           ( SCR # 91 )                                                    ( LINE EDITING COMMANDS                           WFR-790105 )  : Rx                         ( REPLACE ON LINE #-1, FROM PAD *)       PAD 1+ SWAP -MOVE ;                                                                                                       : P                          ( PUT FOLLOWING TEXT ON LINE-1 *)        1 TEXT Rx ;                                                                                                               : Ix                      ( INSERT TEXT FROM PAD ONTO LINE # *)       DUP S Rx ;                                                                                                                 : TOP                  ( HOME CURSOR TO TOP LEFT OF SCREEN *)        0 R# ! ;                                                                                                                  ( SCR # 92 )                                                    ( SCREEN EDITING COMMANDS                        WFR-79APR27 )  : CLEAR                          ( CLEAR SCREEN BY NUMBER-1 *)        SCR ! 10 0 DO FORTH I EDITOR E LOOP ;                                                                                     : FLUSH                  ( WRITE ALL UPDATED BLOCKS TO DISC *)      [ LIMIT FIRST - B/BUF 4 + / ]         ( NUMBER OF BUFFERS)      LITERAL 0 DO 7FFF BUFFER DROP LOOP ;                                                                                        : COPY                  ( DUPLICATE SCREEN-2, ONTO SCREEN-1 *)     B/SCR * OFFSET @ + SWAP B/SCR * B/SCR OVER + SWAP               DO DUP FORTH I BLOCK 2 - ! 1+ UPDATE LOOP                       DROP FLUSH ;                                                                                                                                                                                 ( SCR # 93 )                                                    ( DOUBLE NUMBER SUPPORT                          WFR-80APR24 )  ( OPERATES ON 32 BIT DOUBLE NUMBERS OR TWO 16-BIT INTEGERS   )  FORTH DEFINITIONS                                                                                                               : 2DROP DROP DROP ; ( DROP DOUBLE NUMBER )                                                                                      ( : 2DUP OVER OVER ; ( DUPLICATE A DOUBLE NUMBER )                                                                              : 2SWAP ROT >R ROT R> ;                                                ( BRING SECOND DOUBLE TO TOP OF STACK )                  EDITOR DEFINITIONS                                                                                                                                                                              ( SCR # 94 )                                                    ( STRING MATCH FOR EDITOR                        PM-WFR-80APR25): -TEXT                    ( ADDRESS-3, COUNT-2, ADDRESS-1 --- ) SWAP -DUP IF      ( LEAVE BOOLEAN MATCHED=NON-zERO, NOPE=ZERO )           OVER + SWAP           ( NEITHER ADDRESS MAY BE ZERO!)      DO DUP C@ FORTH I C@ -                                             IF 0= LEAVE ELSE 1+ THEN LOOP                                ELSE DROP 0= THEN ;                                       : MATCH     ( CURSOR ADDRESS-4, BYTES LEFT-3, STRING ADDRESS-2,)            ( STRING COUNT-1, --- BOOLEAN-2, CURSOR MOVEMENT-1 )  >R >R 2DUP R> R> 2SWAP OVER + SWAP                              ( CADDR-6,  BLEFT-5, $ADDR-4, SLEN-3, CADDR+BLEFT-2, CADDR-1 )  DO 2DUP FORTH I -TEXT                                             IF >R 2DROP R> - I SWAP - 0 SWAP 0 0 LEAVE                      ( CADDR BLEFT SADDR SLEN OR ELSE O OFFSET O O )                   THEN LOOP 2DROP      ( CADDR-2, BLEFT-1, OR O-2, OFFSET-1)    SWAP 0= SWAP ;                                                                                                              ( SCR # 95 )                                                    ( STRING EDITING COMMANDS                           WFR-79MAR24): 1LINE        ( SCAN LINE WITH CURSOR FOR MATCH TO PAD TEXT, *)                              ( UPDATE CURSOR, RETURN BOOLEAN *)       #LAG PAD COUNT MATCH R# +! ;                                                                                             : FIND     ( STRING AT PAD OVER FULL SCREEN RANGE, ELSE ERROR *)     BEGIN 3FF R# @ <                                                   IF TOP PAD HERE C/L 1+ CMOVE 0 ERROR ENDIF                      1LINE UNTIL ;                                                                                                           : DELETEx                    ( BACKWARDS AT CURSOR BY COUNT-1 *)     >R #LAG + FORTH R -        ( SAVE BLANK FILL LOCATION )         #LAG R MINUS R# +!         ( BACKUP CURSOR )                    #LEAD + SWAP CMOVE                                              R> BLANKS UPDATE ;       ( FILL FROM END OF TEXT )                                                                         ( SCR # 96 )                                                    ( STRING EDITOR COMMANDS                           WFR-79MAR24 ): N     ( FIND NEXT OCCURANCE OF PREVIOUS TEXT *)                     FIND 0 M ;                                                : F     ( FIND OCCURANCE OF FOLLOWING TEXT *)                          1 TEXT N ;                                                                                                               : Ex     ( BACKUP CURSOR BY TEXT IN PAD *)                             PAD C@ MINUS M ;                                         : X     ( DELETE FOLLOWING TEXT *)                                     1 TEXT FIND PAD C@ DELETE 0 M ;                                                                                          : TILL ( DELETE ON CURSOR LINE, FROM CURSOR T0 TEXT END *)             #LEAD + 1 TEXT 1LINE 0= 0 ?ERROR                                #LEAD + SWAP - DELETE 0 M ;                                                                                              ( SCR # 97 )                                                    ( STRING EDITOR COMMANDS                            WFR-79MAR23): C         ( SPREAD AT CURSOR AND COPY IN THE FOLLOWING TEXT *)   1 TEXT PAD COUNT                                                #LAG ROT OVER MIN >R                                            FORTH R R# +!   ( BUMP CURSOR )                                 R - >R          ( CHARS T0 SAVE )                               DUP HERE R CMOVE  ( FROM OLD CURSOR T0 HERE )                   HERE #LEAD + R> CMOVE ( HERE T0 CURSOR LOCATION )               R> CMOVE UPDATE ( PAD T0 OLD CURSOR )                           0 M   ( LOOK AT NEW LINE ) ;                                 FORTH DEFINITIONS DECIMAL                                       ( LATEST  12 +ORIGIN ! ( TOP NFA )                              ( HERE    28 +ORIGIN ! ( FENCE )                                ( HERE    30 +ORIGIN ! ( DP )                                   ( ' EDITOR 6 + 32 +ORIGIN ! ( VOC-LINK )                        ( HERE FENCE ! ;S                                                                                                                                                                               MYFILE 20 DUMP                                                  MOUNT                                                           MYFILE 20 DUMP                                                  EDITOR                                                                                                                          HEX                                                             0 0 (LINE) . U.                                                                                                                                                                                 FIRST U.                                                        LIMIT U.                                                        B/BUF .                                                         B/SCR .                                                         USE @ U.                                                        PREV @ U.                                                                                                                       FIRST LIMIT FIRST - 1+ ERASE                                    0 FIRST !                                                       FIRST 2+ 100 BLANKS                                                                                                             40 0 DO FIRST I 0 R/W LOOP                                                                                                                                                                      0 SCR !                                                         SCR @ U.                                                        FIRST LIMIT FIRST -   DUMP                                      0 CLEAR                                                         MYFILE 20 DUMP                                                  SCR @ U.                                                        FIRST LIMIT FIRST -   DUMP                                      0 LIST                                                                                                                          0 P Line 0                                                      1 P Line One                                                    5 P Five Five                                                   9 P niner niner                                                 0 LIST                                                          FLUSH                                                                                                                           1 LIST                                                          0 LIST                                                                                                                          WARNING @ .                                                     WIDTH @ .                                                                                                                       4 LIST0 P ( ERROR MESSAGES )                                          1 P EMPTY STACK2 P DICTIONARY FULL3 P HAS INCORRECT ADDRESS MODE4 P ISN'T UNIQUE6 P DISC RANGE ?7 P FULL STACK8 P DISC ERROR !15 P FORTH INTEREST GROUPFLUSH1 LIST4 LIST                                4 LIST0 P ( ERROR MESSAGES )1 P COMPILATION ONLY, USE IN DEFINITION2 P EXECUTION ONLY3 P CONDITIONALS NOT PAIRED4 P DEFINITON NOT FINISHED5 P IN PROTECTED DICTIONARY6 P USE ONLY WHEN LOADING7 P OFF CURRENT EDITING SCREEN8 P DECLARE VOCABULARYFLUSH1 LIST5 LIST1 3 ERROR3 MESSAGEMPX                                                             FMRGFFF0p ramdisk.dsk 4000 9FFFq