org c000

label 0000 DCBLNK
label 0002 DCBDID
label 0004 DCBDVR 
label 0006 DCBIOA 
label 0008 DCBERR 
label 0009 DCBEXT 
; PART 2 - DEVICE DEPENDENT DATA
label 000A DCBDRV 
label 000B DCBBLK 
label 000D DCBBUF 
; PART 3 - DRIVER WORK SPACE
label 000F DCBTRK 
label 0010 DCBSEC 
label 000F DCBCUR 
label 0011 DCBPRV 
label 0013 DCBNXT 
label 0015 DCBCNT 
label 0016 DCBADD 
label 0018 DCBTYP 
label 0019 DCBCRC 


label ffde PSYMON_RAM
label ffee PSYMON_MonEnt

comment C006 ; 4 copies of 4 bytes of data
data C006-c015
data c016-c01f
label C020 MiniDos9Start
comment c020 ; BASE OF PSYMON RAM
Comment C024 ; Y -> MiniDos9SWI3
comment C028 ; SWI3v ; (114) SOFTWARE INTERRUPT 3
comment C02B ; FRERAM ; (126) ADDRESS OF FREE RAM
comment C02F ; MONITOR RE-ENTRY
comment c032 ; save PSYMON_MonEnt in freeRam+$40
label c035 RetryBoot
comment C035 ; call with Y -> freeRam Ret x -> #DK DCB
comment C037 ; load B with 1, DSKRD function 
comment C039 ; DCBDRV (drive #1)
comment C03B ; DCBBUF (DCBBUF is a Word 
comment C03B ;     so this should set it to $0100)
comment c03d ; REQIO
data c03f
comment C040 ; DCBERR ERROR STATUS CODE
comment C042 ; NoError we are good

label C044 BootLoaderERROR

data C04B

comment c049 ; PSTRNG
comment C050 ; DSPSBY

data C052
comment C055 ; return to MONITR 
data C055

label C06A ErrorString
data c06a-c07a
label C05B BootLoadedOK

comment C065 ; transfer control to boot loader?
comment C065 ;     done via DCBBUF,X
comment C065 ; U -> Minidos/9 rom ($c000) 
comment C065 ; Y -> DCBIOA
comment C065 ; X -> #DK DCB

label C07B RAMSETUP
commentline C07B *************************************
commentline C07B * Y-> scratch ram. (from psymon?)
commentline C07B *  Creates some table built ( 4 
commentline C07B *  occurance of 8 bytes of data, 
commentline C07B *  $20 bytes) from data @ C006
commentline C07B *  followed by the #DK DCB ($20 bytes)
commentline C07B *************************************

comment C085 ; loop 4 times, loop counter is on top of stack
label C087 LC087
comment C097 ; dec loop counter
comment C099 ; do it again if not done.
comment C09B ; remove loop counter from stack
comment C09F ; Set #bytes in DCB to clear
label C0A1 ClearDCB
comment C0A6 ; load d with 'DK' 
comment C0A9 ; Store in DCBDID
label C0BC DKDrvr
comment C0AB ; load driver address
comment C0AE ; store in DCBDrv
comment C0B2 ; set DCBExt bytes to $16
comment C0B4 ; really '2,S' so get Y from stack.
comment C0B7 ; set DCBIOA
comment C0CB ; preset #DK DCBErr

comment C0CF ; load A with function code to test
comment C0D1 ; U -> DriverBranchTable
label C0D4 TestFuncCodeBits
comment C0D4 ; test A and Function code on stack
comment C0D8 ; point to next entry in DriverBranchTable
comment C0DA ; next function (CntlFn, StatFn, WritFn, ReadFn)
label C0DD Found
comment c0df ; jump into DriverBranchTable
label C0E1 DriverBranchTable


label C3A5 DKCtrlFn
commentline C0EE *******************************
commentline C0EE * Enter with X -> #DK DCB
commentline C0EE * Y -> [DCBIOA,X] = FreeRam
commentline C0EE *******************************

label C0EE DKStatFn
label C301 DKWritFn
label C1FD DKReadFn
label C15D DKStatFnError

;label C0E1 LC0E1
;label C0E4 LC0E4
;label C0E7 LC0E7
;label C0EA LC0EA

commentline C2E3 ; Calculate CRC code
label C2E3 CRC
label C2F5 CX
label C2FD C1


comment C0FA ; Y -> DCB DRIVE TABLE index by Drive# 8 Bytes per entry 

comment C123 ; IO 03 DriveStatus/Drive&TrackSelect
comment C13E ; IO 03 DriveStatus/Drive&TrackSelect
comment C154 ; IO 03 DriveStatus/Drive&TrackSelect 
comment C16A ; IO 03 DriveStatus/Drive&TrackSelect
comment C174 ; IO 03 DriveStatus/Drive&TrackSelect
comment C194 ; IO 03 DriveStatus/Drive&TrackSelect
comment C196 ; IO 05 MotorOn/... Turn Motor on
comment C1A1 ; IO 03 DriveStatus/Drive&TrackSelect
comment C1E0 ; IO 03 DriveStatus/Drive&TrackSelect
label C264 DKReadFnX
comment C265 ; set SYNC byte to $FB
comment C267 ; IO 00 Status/Sync
comment C272 ; IO 04 ReceiverRestartPulse/WritePulse
comment C276 ; IO 02 SectorCounter/FillWordPort
comment C27F ; IO 00 Status/Sync
comment C283 ; IO 01 ReceiveData/WriteData
comment C292 ; IO 00 Status/Sync
comment C296 ; IO 01 ReceiveData/WriteData
comment C2B3 ; IO 02 SectorCounter/FillWordPort
comment C2BD ; IO 03 DriveStatus/Drive&TrackSelect
comment C2C1 ; IO 03 DriveStatus/Drive&TrackSelect
comment C31E ; IO 02 SectorCounter/FillWordPort
comment C327 ; IO 04 ReceiverRestartPulse/WritePulse
comment C363 ; IO 01 ReceiveData/WriteData
comment C3AA ; IO 03 DriveStatus/Drive&TrackSelect
comment C3BE ; IO 03 DriveStatus/Drive&TrackSelect

label C33B MiniDos9SWI3

label C3E6 ReturnToPsyMon
comment C3E9 ; FRERAM ; (126) ADDRESS OF FREE RAM
comment C3EC ; PSYMON_MonEnt



data C3EF-C3ff

commentline C3EF *********************************************************************
commentline C3EF *                  From Byte mag. May 1980 p. 48                    *
commentline C3EF *********************************************************************
commentline C3EF Hexadecimal 		Function When Used as Input
commentline C3EF   Address
commentline C3EF CC00 	Read USRT status:
commentline C3EF 		bit 0 = 1 means disk unit ready to send byte to computer
commentline C3EF 			at address CC01 during read operation
commentline C3EF 		bit 7 = 1 means disk unit ready to receive byte from computer
commentline C3EF 			at address CC01 during write operation
commentline C3EF CC01 	Address used to transmit data from disk drive to computer during read
commentline C3EF 		operation
commentline C3EF CC02 	During read operation, bits 0 thru 3 contain current sector number in
commentline C3EF 		binary
commentline C3EF CC03 	Drive status byte: see table 2b.
commentline C3EF CC04 	Accessing this location with a load instruction (LDA) causes a read
commentline C3EF 		operation to take place
commentline C3EF *********************************************************************
commentline C3EF Table 2b Drive status byte (Read)
commentline C3EF Bit	Value	Meaning
commentline C3EF 0	1	Write protect notch in disk covered; disk is protected
commentline C3EF 1	1 	Head is at track 0
commentline C3EF 2	0	Drive motor is on
commentline C3EF 3	0	Drive circuit is ready to write to disk
commentline C3EF 4	1	Sector pulse; drive detects sector hole
commentline C3EF 5	1	Index pulse; drive detects special index hole
commentline C3EF 6,7		Binary number of drive selected (01 thru 03)
commentline C3EF *********************************************************************
commentline C3EF table 2c
commentline C3EF Hexadecimal	Function When Used as Output
commentline C3EF   Address
commentline C3EF CC00		Defines value that controller will recognize as the SYNC byte at the
commentline C3EF 			beginning of a read operation; hexadecimal FB used in Percom format
commentline C3EF CC01		Address used to transmit data from computer to disk unit during write
commentline C3EF 			operation
commentline C3EF CC02		Defines value that controller will recognize as the filler byte (written
commentline C3EF 			after trailer until disk motor turns off); hexadecimal FF used in this
commentline C3EF 			software
commentline C3EF CC03		Data to select drive and head movement direction:
commentline C3EF 			bit 4 		direction of head movement: 1 = in, 0 = out
commentline C3EF 			bit 5 		step pulse bit; causes data·transfer head to
commentline C3EF 					jump to next track in direction given by bit 4
commentline C3EF 			bits 6, 7	binary number of drive to be selected
commentline C3EF CC04 		Accessing this location with a store instruction (STA) causes a write
commentline C3EF 			operation to take place
commentline C3EF CC05		Accessing this location with either a load (LDA) or store instruction
commentline C3EF 			causes a motor·on pulse to be sent to the disk drive
commentline C3EF CC06		Accessing this location with either a load or store instruction causes a
commentline C3EF 			motor·off pulse to be sent to the disk drive
commentline C3EF *********************************************************************

