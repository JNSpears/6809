 nam MPX/9-BootSector
 ttl PERCOM'S 6809 MPX/9 BootSector
 spc 1
**************************************************
* MPX/9 VERSION 1.20
* COPYRIGHT (C) 1980 BY PERCOM DATA CO. INC.
* ALL RIGHTS RESERVED
*
* WRITTEN BY JAMES W. STUTSMAN
*
* INITIAL RELEASE 05/12/80
*
* THIS PROGRAM PROVIDES A SIMPLE, BUT POWERFUL
* OPERATING SYSTEM FOR THE PERCOM LFD LINE OF
* MINIFLOPPY DISK DRIVES. IT PERMITS DISK FILES
* TO BE MANIPULATED BY FILE NAMES OF 8 CHAR-
* ACTERS OR LESS WITH A TWO CHARACTER SUFFIX.
* THE RESIDENT COMMANDS ARE GIVEN BELOW. EACH
* COMMAND CONSISTS OF A SINGLE LETTER FOLLONED
* BY ZERO OR MORE PARAMETERS. REQUIRED PARAM-
* ETERS ARE ENCLOSED WITH "<>", WHILE OPTIONAL
* ITEMS ARE ENCLOSED WITH "[]".
*
*   S(AVE) <NAME> <BEGIN> <END> [EXECUTE]
*                       SAVE MEMORY TO DISK FILE
*   L(OAD) <NAME> [ADDRESS]
*                       LOAD A FILE INTO MEMORY
*   D(ELETE) <NAME>     DELETE FILE FROM DIRECTORY
*   F(ILES) <DRIVE>     LIST FILES ON TERMINAL
*   I(NIT) <DRIVE>      INITIALIZE A DISK
*   R(ENAME) <OLD NAME> <NEW NAME>
*                       CHANGE THE NAME OF A FILE
*   G(O) <ADDRESS>      GO TO MEMORY ADDRESS
*   M(ONITOR)           EXIT TO PSYMON MONITOR
*
* IF A COMMAND IS ENTERED WHICH IS NOT FOUND IN
* THE ABOVE LIST, MPX/9 WILL SEARCH FOR A FILE
* WITH THAT NAME ON DISK. IF FOUND IT WILL BE
* LOADED AND: IF EXECUTION ADDRESS IS PROVIDED,
* EXECUTED.
*
* BLANKS ARE USED AS DELIMITERS TO SEPARATE THE
* ENTRIES ON A LINE.
* WHEN ENTERING FILE NAMES PRECEDE THE NAME
* BY THE DRIVE NUMBER To BE AFFECTED BY THE
* COMMAND. THIS IS ENTERED AS THE NUMBER (1-4)
* FOLLOWED BY A SLASH AND THE COMMAND, WITH NO
* INTERVENING SPACES. IN ALL COMMANDS WHICH
* REQUIRE A DRIVE NUMBER. 1 IS ASSUMED IF NO
* DRIVE NUMBER IS PROVIDED.
*
* FILE NAMES ARE OF THE FORM 'NAME.SF,SIZE'
* NHERE 'NAME' MAY BE UP To 8 CHARACTERS AND 'SF'
* MAY 1 OR 2 CHARACTERSE 'SIZE' IS REQUIRED FDR
* NEW FILES ONLV, AND DEFAULTS TO 8 BLOCKS IF
* NOT PROVIDED. IF NO SUFFIX IS ENTERED FOR A
* FILE, CERTAIN DEFAULTS ARE USED. SEE BELOW
*
* THIS VERSION OF MPX/9 REQUIRES THE PSYMON
* ROM MONITOR AND MINIDOS/9 DISK DRIVER.
*
* ERROR CDDES DISPLAYED BY MPX/9:
* 
*   OK -  0 No ERRQR
*   FN -  1 ILLEGAL FUNCTION ATTEMPTED
*   ID -  2 ILLEGAL DISK DRIVE #
*   IB -  3 ILLEGAL BLOCK # USED
*   DM -  4 DISK MISSING OR INOPERATIVE
*   NB -  5 NULL (EMPTY) BLOCK READ
*   SK -  6 SEEK ERROR
*   RD -  7 DISK READ ERROR
*   VF -  8 DISK VERIFV ERROR
*   WP -  9 WRITE PROTECTED DISK
*   NF - 10 FILE NOT FOUND
*   DF - 11 DISK FULL GR NO SPACE FOR FILE
*   IF - 12 INVALID FILE SPEC
*   NC - 13 FILE NOT CLOSED
*   UF - 14 ACCESS TO UNOPENED FILE
*   IA - 15 ILLEGAL ACCESS TO FILE
*   EF - 16 END OF FILE
*   SN - 17 SYNTAX ERROR IN COMMAND
*   UE - 18 UNKNOWN ERROR
*
* STANDARD MFA/9 FILE SUFFIXES:
*   CM - CQMMAND FILE
*   MI - MENQRV IMAGE FILE
*   SY - SYSTEM FILE
*   TX - TEXT FILE 
*   RS - RESERVED SPACE
*   HX - HEXADECIMAL (S1-S9) FILE
*
* DEFAULT SUFFIX ASSUMPTIONS:
*   CM - FOR FILE NAMES ENTERED AS COMMANDS
*   MI - FOR FILE NAMES REFERENCED BY 'L' & 'S'
*
* REVISION 1 - JWS O8/28/80
*       BYTE LEVEL I/O FAILS IN LAST BLOCK
**************************************************
 spc 1
 
**************************************************
* SYSTEM ADDRESS CONSTANTS
**************************************************
ROM1    EQU $FC00 ; BASE ADDRESS OF PSYMON ROM
ROM2    EQU $F800 ; BASE ADDRESS OF EXTENSION ROM
RAM     EQU $F380 ; BASE ADDRESS OF SCRATCHPAD RAM;
FREE    EQU $F000 ; ADDRESS OF FREE RAM

**************************************************
* ADDRESS OFFSETS USED BY MPX/9
**************************************************
MPXRAM EQU 256  ; START OF MPX RAM IN 4K BLOCK
M9RAM EQU 0     ; MINIDOS/9 RAM OFFSET
PSYRAM EQU $FFDE ; POINTER TO PSYMON RAM VECTOR
DCBCHN EQU 104  ; OFFSET TO DCB CHAIN IN ABOVE
FRERAM EQU 126  ; OFFSET TO FREE RAM POINTER IN ABOVE
K EQU 1024      ; CONVENIENCE CONSTANT
DIRSIZ EQU 2    ; NUMBER OF DIRECTORY BLOCKS
MaxDrv	EQU 4		; Max number of drives supported
 spc 1
**************************************************
* SWI3 PARAMETER DEFINITIONS
**************************************************
* PSYMON (tm) ROUTINE REFERENCES
MONITR EQU 0 ;RETURN TO MONITOR MODE
REQIO EQU 1 ;REQUEST I/O
OUTCHR EQU 2 ;OUTPUT CHARACTER TO TERMINAL
INCHR EQU 3 ;INPUT CHARACTER FROM TERMINAL
PSTRNG EQU 4 ;PRINT STRING
GETHEX EQU 5 ;GET HEX NUMBER
DSPDBY EQU 6 ;DISPLAY DOUBLE BYTE
DSPSBY EQU 7 ;DISPLAY SINGLE BYTE
 spc 1
* MPX/9 ROUTINE REFERENCES
MPX    EQU 8    ;RETURN TO MPX/9
GETLIN EQU 9    ;GET * LINE OF INPUT
SKPSPC EQU 10   ;SKIP SPACES IN LINE BUFFER
GETWRD EQU 11   ;GET THE NEXT WORD IN LINE
PROCMD EQU 12   ;PROCESS COMMAND LINE
RPTERR EQU 13   ;REPORT ERROR
LOCFIL EQU 14   ;LOCATE FILE IN DIRECTORY
LOCSPC EQU 15   ;LOCATE SPACE IN DIRECTORY
RDDRCT EQU 16   ;READ DISK DIRECTORY
WTDRCT EQU 17   ;WRITE DISK DIRECTORY
INTFCB EQU 18   ;INITIALIZE FCB
OPNFIL EQU 19   ;OPEN FILE
CLSFIL EQU 20   ;CLOSE FILE
RDFIL  EQU 21   ;READ A FILE (BYTE)
WTFIL  EQU 22   ;WRITE A FILE (BYTE)
RDBLK  EQU 23   ;READ A BLOCK
WTBLK  EQU 24   ;WRITE A BLOCK
MEMLOD EQU 25   ;LOAD A MEMORY SEGMENT
MEMSAV EQU 26   ;SAVE A MEMORY SEGMENT
COMPAR EQU 27   ;COMPARE STRINGS
BLKMOV EQU 28   ;BLOCK MOVE
DECNUM EQU 29   ;GET DECIMAL NUMBER
HEXNUM EQU 30   ;GET HEXADECIMAL NUMBER
DSPDEC EQU 31   ;DISPLAY DECIMAL NUMBER & SPACE
DELFIL EQU 32   ;DELETE A DISK FILE
LOCDCB EQU 33   ;LOCATE DCB FOR DEVICE
ADDDCB EQU 34   ;ADD DCB TO DEVICE LIST
DELDCB EQU 35   ;DELETE DCB FROM DEVICE LIST
 spc 1
SYSLIM EQU 35   ;LAST VALID CALL
 spc 1
**************************************************
* ASCII CHARACTER CONSTANTS
**************************************************
CR EQU $0D ;CARRIAGE RETURN
LF EQU $0A ;LINE FEED
NUL EQU $00 ;NULL
BS EQU $08 ;BACKSPACE
CAN EQU $18 ;CANCEL
SP EQU $20 ;SPACE
 spc 1
**************************************************
* MINIDOS/9 DCB DEFINITION
********************w*****************************
* PART 1 - BASIC DCB DATA
DCBLNK EQU 0 ;POINTER TO NEXT DCB
DCBDID EQU 2 ;ASCII ID ('DK' FOR DISK)
DCBDVR EQU 4 ;DEVICE DRIVER ADDRESS
DCBIOA EQU 6 ;DEVICE I/O ADDRESS
DCBERR EQU 8 ;ERROR STATUS CODE
DCBEXT EQU 9 ;DCB EXTENSION BYTE COUNT
* PART 2 - DEVICE DEPENDENT DATA
DCBDRV EQU 10 ;DISK DRIVE # (1-4)
DCBBLK EQU 11 ;DISK BLOCK
DCBBUF EQU 13 ;BUFFER ADDRESS
* PART 3 - DRIVER WORK SPACE
DCBTRK EQU 15 ;TRACK
DCBSEC EQU 16 ;SECTOR
DCBCUR EQU 15 ;CURRENT TRACK/SECTOR
DCBPRV EQU 17 ;PREVIOUS BLOCK
DCBNXT EQU 19 ;NEXT BLOCK
DCBCNT EQU 21 ;BYTE COUNT IN THIS BLOCK
DCBADD EQU 22 ;DATA ADDRESS FOR THIS BLOCK
DCBTYP EQU 24 ;BLOCK TYPE CODE
DCBCRC EQU 25 ;DATA CRC
 spc 1
DCBSIZ EQU 32 ;MAXIMUM DCB SIZE
 spc 1
* FUNCTION CODES
DSKRD EQU 1 ;READ DISK BLOCK
DSKWT EQU 2 ;WRITE DISK BLOCK
DSKWV EQU 3 ;WRITE & VERIFY DISK BLOCK
DSKSL EQU 4 ;SELECT DISK & RETURN STATUS
DSKCT EQU 8 ;DISK CONTROL FUNCTION
 spc 1
**************************************************
* MINIDOS/9 RAM DEFINITIONS (128 BYTES MAX)
**************************************************
 ORG M9RAM
 spc 1
* DRIVE DESCRIPTION TABLE
DDT RMB 32
 spc 1
* ONE ENTRY PER DRIVE DEFINED AS FOLLOWS!
CURTRK EQU 0 ;CURRENT TRACK # (HEAD POSITION)
NUMTRK EQU 1 ;NUMBER OF TRACKS FOR THIS DRIVE
NUMSEC EQU 2 ;NUMBER OF SECTORS PER TRACK
STEPTM EQU 3 ;STEP TIME (IN MSEC) FOR THIS DRIVE
SETLTM EQU 4 ;SETTLE TIME (IN MSEC) FOR THIS DRIVE
SILTBL EQU 5 ;ADDRESS IN SECTOR INTERLACE TABLE
* ONE BYTE RESERVED FOR EXPANSION
 spc 1
* MINIDOS DISK DCB
DKDCB RMB DCBSIZ ;RESERVE SPACE FOR DISK DCB
 spc 1
SYSVEC RMB 2 ;SYSTEM CALL VECTOR
 spc 1
**************************************************
* MPX/9 RAM DEFINITIONS A
**************************************************
 ORG MPXRAM
 spc 1
 RMB 256 ;RESERVED SPACE FOR MPX/9 SYSTEM STACK
STACK EQU *
 spc 1
* RESERVED SPACE FOR BOOT PROGRAM
BOOT RMB 128 ;BOOT LIMIT IS 128 BYTES
 spc 1
* DISK PARAMETERS (CAPACITY 3 STEP TIME)
DSKPAR RMB 16
 spc 1
* SYSTEM POINTERS
SYSDCB RMB 2 ;POINTER TO SYSTEM DISK DCB
MDSBAS RMB 2 ;MINIDOS/9 RAM BASE ADDRESS
SCLVEC RMB 2 ;EXTENDED SWI3 CALL VECTOR
DEVLST RMB 2 ;SYSTEM DEVICE LIST POINTER
MPXLOC RMB 2 ;MPX/9 DISK LOCATION
 spc 1
* CONFIGURATION PARAMETERS
SYSBS RMB 1 ;SYSTEM BACKSPACE CODE
SYSBSE RMB 4 ;SYSTEM BACKSPACE ECHO STRING
SYSCAN RMB 1 ;SYSTEM CANCEL CODE
 spc 1
* SYSTEM FILE CONTROL BLOCK
SYSFCB RMB 32 
 spc 1
* MPX/9 LINE BUFFER
LINBUF RMB 64 ;SYSTEM LINE BUFFER
 spc 1
DIRBUF RMB DIRSIZ*256 ;DIRECTORY BUFFER
 spc 1
MPXBAS EQU * ;BASE OF MPX/9 CODE
 spc 1
**************************************************
* MPX/9 FCB DEFINITION
**************************************************
 ORG 0 ;RELATIVE TO Y
FCB RMB 32 ;FILE CONTROL BLOCK
 spc 1
 ORG FCB ;FORMAT AFTER INIT OR CLOSE
FCBOPN RMB 1 ;SET TO 0 BY INIT OR CLOSE
FCBDRN RMB 1 ;FILE DRIVE
FCBDBA RMB 2 ;DISK BUFFER ADDRESS
FCBNAM RMB 8 ;FILE NAME
FCBSUF RMB 2 ;FILE SUFFIX
FCBSIZ RMB 2 ;FILE SIZE
 RMB 15 ; RESERVED
FCBUFF RMB 1 ;UNOPENED FILE FLAG (CLEARED BY INIT, CLOSE)
 spc 1
 ORG FCB ;FORMAT AFTER OPEN
FCBUSE RMB 1 ;FILE USAGE (1=R, 2=W, 3=R/W)
FCBDRV RMB 1 ;FILE DRIVE
FCBBUF RMB 2 ;BUFFER ADDRESS
FCBCNT RMB 1 ;CURRENT BYTE COUNT
FCBADD RMB 2 ;ADDRESS VECTOR
FCBTYP RMB 1 ;BLOCK TYPE CODE (USER DEFINED)
FCBSTR RMB 2 ;FILE START BLOCK
FCBEND RMB 2 ;FILE END BLOCK
FCBCUR RMB 2 ;CURRENT RELATIVE BLOCK
FCBPRV RMB 2 ;PREVIOUS RELATIVE BLOCK
FCBNXT RMB 2 ;NEXT RELATIVE BLOCK
FCBEXT RMB 2 ;DIRECTORY EXTENSION BYTES
FCBPTR RMB 2 ;DATA POINTER
 RMB 9 ;RESERVED SPACE
FCBSTS RMB 1 ;FILE STATUS (SET BY OPEN)
 spc 1
OPNBIT EQU $80 ;FILE OPEN STATUS BIT
RDBIT EQU $01 ;READ BUFFER FULL STATUS BIT
WTBIT EQU $02 ;WRITE BUFFER FULL STATUS BIT
 spc 1
* MPX/9 DIRECTORY ENTRY DEFINITION
 ORG 0 ;RELATIVE TO X
DIR RMB 16 ;DIRECTORY ENTRY
 spc 1
 ORG DIR
DIRNAM RMB 8 ;FILE NAME
DIRSUF RMB 2 ;FILE SUFFIX
DIRSTR RMB 2 ;FILE START BLOCK
DIREND RMB 2 ;FILE END BLOCK
DIREXT RMB 2 ;EXTENSION BYTES
 PAGE

*****************************
* Software Vectors
*****************************
RAMv            equ $ffde
DspSByv         equ $ffe0
DspDByv         equ $ffe2
GetHexv         equ $ffe4
PStringv        equ $ffe6
InChrv          equ $ffe8
OutChrv         equ $ffea
ReqIOv          equ $ffec
MonEntv         equ $ffee


 ORG $0200

;; ENTRY VIA JSR
;; U -> Minidos/9 rom ($c000) 
;; Y -> DCBIOA
;; X -> #DK DCB
BootEntry:
        PSHS X,Y,U ; U=4,S (Minidos/9 boot rom $4000);   Y=2,S (DCBIOA $f000)    X=0,S (#DK DCB $f020)

; Find highest 4k block below $C000

        ldx     #$C000          ; Rom location on LDF-400
        ldd     #$55AA          ; test pattern
; try again at  lower address
ScanMemoryLoop:
        leax    -4*K,X	; move down 4k
        sta     ,x
        cmpa    ,x
        bne     ScanMemoryLoop
        stb     ,x
        cmpb    ,x
        bne     ScanMemoryLoop

        ; hit $0000 stop. ?????

        leax    -1*K,X          ; JNS move down 1k (needed for extra debug code)

ScanMemoryLoopX:
        ; OK found memory at ,X
        ; TODO: maybe should scan from 0,x to 4k,x to make sure it is all ram.
        
        ; Load mpx9 from disk to ,X + $500
        LDD     #3      ; GET STARTING BLOCK
        STD     MPXLOC,X ; Save MPXLOC in memory releative to loaded MPX/9 image
        STY     MDSBAS,X
        LDU     0,S     ; POINT U AT SYSTEM DCB
        STD     DCBBLK,U ; PLUG BLOCK
        LDA     #1      ; Drive to boot from
        STA     DCBDRV,U
        STU     SYSDCB,X ; Save SYSDCB in memory releative to loaded MPX/9 image

;
;	U -> System DCB 
; 	Y -> $f000 (mpx ram at $F380)
;       	 RAM+DCBCHN
;
;JNS Won't fit
;	ldy	RAM+DCBCHN	; Y -> head of dcb chain
;	sty	DCBLNK,U	; link sysDCB to head of DCB chain
;	STU	RAM+DCBCHN	; save SYSDCB in DCBCHN

;SYSDCB RMB 2 ;POINTER TO SYSTEM DISK DCB       ; f020
;MDSBAS RMB 2 ;MINIDOS/9 RAM BASE ADDRESS       ; f000
;SCLVEC RMB 2 ;EXTENDED SWI3 CALL VECTOR        ; cdcd
;DEVLST RMB 2 ;SYSTEM DEVICE LIST POINTER       ; cdcd
;MPXLOC RMB 2 ;MPX/9 DISK LOCATION              ; 0003
        LEAX    $0500,X         ; inc X to leave room for data before the MPX/9 image
        STX     DCBBUF,U        ; set up to load into found 4k block of high ram.
        EXG     U,X
        LBSR    MEMLD           ; LOAD THE mpx9 PROGRAM
        
;SYSBS RMB 1 ;SYSTEM BACKSPACE CODE
;SYSBSE RMB 4 ;SYSTEM BACKSPACE ECHO STRING
;SYSCAN RMB 1 ;SYSTEM CANCEL CODE

        leax    -$500,U
        LDA     #8              ; BS code
        sta     SYSBS,X
        leay    SYSBSE,X        ; back space echo string conatains Space, BS+term
        ldb     #SP
        stb     ,Y+             ; then SP
        ora     #$80
        STA     ,Y+             ; then BS+$80
        lda     #$1b            ; ESC code
        sta     SYSCAN,X

        jmp     ,U
        

**************************************************
* SYSTEM CALL 25 - LOAD A MEMORY SEGMENT
*
* ENTRY REQUIREMENTS: X POINTS TO DCB FOR LOAD
*
* EXIT CONDITIONS: B CONTAINS ERROR CODE
*                  Z FLAG IN CC SET PER B
*                    OTHERS UNCHANGED
**************************************************
MEMLD:  PSHS A,X SAVE REGISTERS
MEMLD1  
;	lda #'@
;	SWI3
;	FCB OUTCHR
	
	LDB #DSKRD      ; READ A BLOCK
        SWI3
        FCB REQIO

        LDB DCBERR,X    ; CHECK ERROR STATUS
        BNE MEMLDX      ; EXIT IF ERROR
        CLRA            ; SET UP FOR ADD
        LDB DCBCNT,X
        BNE MEMLD2
        INCA
MEMLD2  ADDD DCBBUF,X   ; CALC NEXT DATA ADDRESS
        STD DCBBUF,X
        LDD DCBNXT,X    ; GET FORWARD LINK
        STD DCBBLK,X
        BNE MEMLD1      ; LOOP IF NOT END OF SEGMENT
MEMLDX  TSTB            ; CHECK ERROR FLAG
        PULS A,X,PC     ; RESTORE & EXIT
        SPC 1


BOOTSIZE equ *-BootEntry

        if BOOTSIZE&~$7f
                ERROR  Boot Sector image must fit in 7F bytes
        endc

        end